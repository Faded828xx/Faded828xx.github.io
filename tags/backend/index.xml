<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Backend on Faded828xx Blog</title>
    <link>https://faded828xx.github.io/tags/backend/</link>
    <description>Recent content in Backend on Faded828xx Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 17 Aug 2021 10:13:50 +0800</lastBuildDate><atom:link href="https://faded828xx.github.io/tags/backend/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Git中ssh和https的对比</title>
      <link>https://faded828xx.github.io/post/git%E4%B8%ADssh%E5%92%8Chttps%E7%9A%84%E5%AF%B9%E6%AF%94/</link>
      <pubDate>Tue, 17 Aug 2021 10:13:50 +0800</pubDate>
      
      <guid>https://faded828xx.github.io/post/git%E4%B8%ADssh%E5%92%8Chttps%E7%9A%84%E5%AF%B9%E6%AF%94/</guid>
      <description>最近实习项目用的码云，因为是企业仓库，所以肯定得用内部账号才有权限。但是在push的时候一直有access denied的问题。
之前clone用的https，应该输过用户名密码，但这次push的时候，idea也蹦出来密码输入，但一直报错。于是就试了ssh连接的方式，按照码云的文档，在本地生成ssh密钥后，~/.ssh路径下，复制到码云ssh密钥管理，然后就可以无障碍clone+push了。但是这时候还是报一些错误，最后觉得是账号本身权限的问题，就在下班前问了老大账号的权限，晚上回到家老大说是权限，给了权限后，能push上去了，白折腾了一下午。
这里比较一下https和ssh两种git的连接方式：
ssh：
 使用22端口，和连接远程服务器同理 通过本地生成ssh密钥再把共钥上传到服务器 速度慢 clone时需要配置ssh key push时因为已经配置了ssh key，因此不需要验证账户的用户名密码 由于clone时就得通过key来验证身份，因此不利于匿名访问，适合内部项目，有权限的项目成员可以自由实现clone和push操作  https：
 使用443端口 通过用户名密码授权 速度快 clone时如果没有权限限制，可以直接克隆，无需验证 push时显然是需要验证的，但是本地会有凭证管理器来自动保存一些用户名密码，有时候权限错误可能是因为用的还是之前保存的账号，需要到keychain access 里修改一下 由于clone时可以不验证，因此利于匿名访问  </description>
    </item>
    
    <item>
      <title>前后端分离</title>
      <link>https://faded828xx.github.io/post/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB/</link>
      <pubDate>Sun, 18 Jul 2021 22:53:19 +0800</pubDate>
      
      <guid>https://faded828xx.github.io/post/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB/</guid>
      <description>这位大佬讲的很好，全篇高能
看了程序羊部署的ruoyi-vue前后端分离项目，去了解一下啥事前后端分离。虽然现在连SpringBoot都还不会。sad
前端开发与后端api进行交互时，往往需要后端服务器传来的数据，因此开发过程中往往过度依赖后端，尤其以jsp更为明显。若是不启动服务器，甚至连完整的html页面都看不到。而node.js的出现改变了这个现象，前端开发时可以通过部署node服务器来获取api数据，具体的操作现在还不太清楚。 当前后端分离后，前端项目和后端项目可以分别部署多台服务器，互不影响且降低访问压力。
我现在大概理解的开发模式有三种：
一、jsp模式 以ForestBlog项目为例
后端服务器需要同时管理页面的生成和api，由于浏览器不能识别jsp页面，因此服务器需要将jsp页面和api数据一起渲染成html页面后，再发送给客户端，当然此时客户端仍然可以调用服务器的api获得json数据，但大部分api在渲染页面时已经由服务器自己调用了。
二、前后端分离模式
这是不使用jsp，服务器可以直接发送静态页面给客户端，这时的页面是不完整的，浏览器还会向服务器发送api请求，服务器返回json数据后，浏览器会将其渲染到自己的页面中。
前端项目和后端项目分别部署到两台服务器上，浏览器发送页面请求时， 前端服务器首先返回不完整的html页面，浏览器再请求api数据，前端服务器将这些请求转发到后端服务器，再将后端返回到json数据传达给浏览器，浏览器自行渲染页面。
因此，在浏览器开发者模式，network-&amp;gt;XHR，大多数网站可以看到浏览器很多调用api的记录，而jsp项目只有很少的api记录，虽然页面中有很多数据库相关的动态数据，但这些不会显示在api记录中，因为浏览器接受到的页面是已经渲染好的，无需再发送api请求。
三、 浏览器渲染给客户端造成了压力，且首页等待时间更长，以及其他相关问题。因此出现了前端服务器渲染页面的模式，这一篇blog吧，还不是很了解，待填坑。 服务端渲染
可见，jsp模式开发后端过程中，与前端高度耦合，在controller层需要返回具体的jsp页面和model数据。而二三两种模式，只需要管理api和json数据。</description>
    </item>
    
  </channel>
</rss>
