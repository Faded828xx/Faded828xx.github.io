<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on Faded828xx Blog</title>
    <link>https://faded828xx.github.io/tags/java/</link>
    <description>Recent content in Java on Faded828xx Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 29 Nov 2021 15:15:23 +0800</lastBuildDate><atom:link href="https://faded828xx.github.io/tags/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>编译jdk</title>
      <link>https://faded828xx.github.io/post/%E7%BC%96%E8%AF%91jdk/</link>
      <pubDate>Mon, 29 Nov 2021 15:15:23 +0800</pubDate>
      
      <guid>https://faded828xx.github.io/post/%E7%BC%96%E8%AF%91jdk/</guid>
      <description>深入理解Java虚拟机借了好几天了，这两天试试编译jdk，遇到了不少麻烦。
这是官方文档，这是源码下载。 环境
MacOS Monterey 12.0.1
Xcode 13.1
OpenJDK 11.0.12 (zulu arm)
源码jdk也是11的，因为本机是m1的arm架构，所以网上大部分的MacOS编译源码都不适用。
第三方依赖的问题就不记录了，缺的就用包管理工具下，没啥说的。执行sh configure进行配置检查的时候，说本机(32位)与目标(64位)不符，我就纳了闷的，然后去自动生成配置的文件里，一通修改，将arm中的32位改为64位，然后sh configure跑通了，不出所料，接下来make images直接挂了，都是C文件报错，应该是架构导致的问题。 查不到答案，去本地虚拟机里跑了一通，结果都是卡在了这一步。
现在还是不明白aarch64和arm64有啥区别，前者是在虚拟机里执行arch的结果，后者是Mac里的结果。 如果相同的话，上述文件中确将两者分开处理。
最后用了云服务器，x86架构的，操作同理，这次成功了。理论上现在修改源码(如println函数)，在重新编译的话，是可以生效的，但是没成功。
另外要搞清楚vm options 和 program arguments的区别。</description>
    </item>
    
    <item>
      <title>Tomcat部署Servlet</title>
      <link>https://faded828xx.github.io/post/tomcat%E9%83%A8%E7%BD%B2servlet/</link>
      <pubDate>Fri, 09 Jul 2021 19:54:52 +0800</pubDate>
      
      <guid>https://faded828xx.github.io/post/tomcat%E9%83%A8%E7%BD%B2servlet/</guid>
      <description>Tomcat与JavaWeb开发技术详解，有了基础后，去年囫囵吞枣学的一些零零散散的知识总算明白了点。 Servlet是web服务器与web应用之间的接口。服务器部分由开源软件构成，包括网络编程和路由功能，Tomcat通过请求参数找到servlet接口的具体实现类；应用部分往往是项目代码，包含了具体的servlet实现类。这个servlet规范由oracle公司制定，服务器和应用开发者通过实现这一规范来适配对方。 Servlet无非就是网络编程加路由，根据socket拿到http报文，解析request参数，通过反射创建具体的servlet实现类，将响应报文写入socket的response中。而之所以说JSP仍是servlet，因为servlet实现类写入response时需要频繁增加html字符串，因此根据request参数将一些变量传入jsp页面会显得清晰，只需维护变量即可，仍是向socket中写入response。
IDEA中部署Tomcat： 注意Tomcat相关配置，servlet编译要添加tomcat中的jar库servlet-api（其他api好像也行），project structure - artifacts - output root 是编译文件结构。 代码参见github，目录如下： </description>
    </item>
    
  </channel>
</rss>
