<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Faded828xx Blog</title>
    <link>https://faded828xx.github.io/post/</link>
    <description>Recent content in Posts on Faded828xx Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 26 Jun 2021 19:34:48 +0800</lastBuildDate><atom:link href="https://faded828xx.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Leetcode773 752 BFS模版</title>
      <link>https://faded828xx.github.io/post/leetcode773-752-bfs%E6%A8%A1%E7%89%88/</link>
      <pubDate>Sat, 26 Jun 2021 19:34:48 +0800</pubDate>
      
      <guid>https://faded828xx.github.io/post/leetcode773-752-bfs%E6%A8%A1%E7%89%88/</guid>
      <description>考试周了， 忙着复习， 贴两道算法题水水博客吧， 都是用的BFS模版。
Leetcode752
class OpenTheLock752 { public static int openLock(String[] deadends, String target) { int tar = Integer.parseInt(target); if (tar == 0) return 0; // target为0 无需变化 Set&amp;lt;Integer&amp;gt; dead = new HashSet&amp;lt;&amp;gt;(); Set&amp;lt;Integer&amp;gt; visited = new HashSet&amp;lt;&amp;gt;(); // 记忆化 防止死循环 for (String str : deadends) { // 感觉用整型好处理点 dead.add(Integer.parseInt(str)); } if (dead.contains(0)) // 0直接锁死 return -1; Deque&amp;lt;Integer&amp;gt; queue = new ArrayDeque&amp;lt;&amp;gt;(); // BFS queue.add(0); visited.add(0); int res = 0; while (!</description>
    </item>
    
    <item>
      <title>为什么使用ip地址</title>
      <link>https://faded828xx.github.io/post/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%BF%E7%94%A8ip%E5%9C%B0%E5%9D%80/</link>
      <pubDate>Sat, 12 Jun 2021 10:16:54 +0800</pubDate>
      
      <guid>https://faded828xx.github.io/post/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%BF%E7%94%A8ip%E5%9C%B0%E5%9D%80/</guid>
      <description>最近计算机网络的书看了不少，一直困扰的问题是既然有了mac地址，虽然有48bit，可能相比IPv4的32bit计算量会剧增，但是相比IPv6的128bit就没压力了吧。因此既然mac地址是绑定在物理设备上的，为什么不用mac地址来直接在网络中寻址。今天在“从实践学习TCP/IP协议”找到了答案： mac地址理论上可易于在局域网中通信，但在路由式网络中，mac地址不能跨越路由接口。即使跨越，固定mac地址不能在地址空间上引入逻辑结构，无法表示具体的物理位置。比如说，两台设备A和B位于不同城市，因为公网IP往往是固定位置的，为新加入子网的设备分配IP，因此路由寻址是无论AB位于哪个城市，其子网的位置都是易寻的，再到子网中找到具体位置。但是用mac地址的话，因为是直接寻址，就会出现AB一会在这个城市，一会在另一个城市，中间的转发设备就要实时更新转发方向，这无疑是自找麻烦。mac地址不能反映物理地址，而公网IP应该在某段时间内是固定位置的。</description>
    </item>
    
    <item>
      <title>Go常量变量</title>
      <link>https://faded828xx.github.io/post/go%E5%B8%B8%E9%87%8F%E5%8F%98%E9%87%8F/</link>
      <pubDate>Wed, 02 Jun 2021 16:50:28 +0800</pubDate>
      
      <guid>https://faded828xx.github.io/post/go%E5%B8%B8%E9%87%8F%E5%8F%98%E9%87%8F/</guid>
      <description>一个类型确定数字型常量所表示的值是不能溢出它的类型的表示范围的。 一个类型不确定数字型常量所表示的值是可以溢出它的默认类型的表示范围的。 当一个类型不确定数字常量值溢出它的默认类型的表示范围时，此数值不会被截断（亦即回绕）。 将一个非常量数字值转换为其它数字类型时，此非常量数字值可以溢出转化结果的类型。 在此转换中，当溢出发生时，转化结果为此非常量数字值的截断（亦即回绕）表示。
总结下来就是：类型确定常量不能截断，因此不能溢出或者一些奇怪的强转，而变量可以强转来截断。这里所说的常量和变量都是指等号右边，大部分与等号左边无关。贴几个例子：
// 三个类型不确定常量。 const n = 1 &amp;lt;&amp;lt; 64 // 默认类型为int const r = &#39;a&#39; + 0x7FFFFFFF // 默认类型为rune const x = 2e+308 // 默认类型为float64 const a uint8 = 256 // error: 256溢出uint8	与a是否const无关 const b = uint8(255) + uint8(1) // error: 256溢出uint8 与b是否const无关 const c = int8(-128) / int8(-1) // error: 128溢出int8 const a = -1.23 // 变量b的类型被推断为内置类型float64。 var b = a // error: 常量1.</description>
    </item>
    
    <item>
      <title>Leetcode1707与数组中元素的最大异或值</title>
      <link>https://faded828xx.github.io/post/leetcode1707%E4%B8%8E%E6%95%B0%E7%BB%84%E4%B8%AD%E5%85%83%E7%B4%A0%E7%9A%84%E6%9C%80%E5%A4%A7%E5%BC%82%E6%88%96%E5%80%BC/</link>
      <pubDate>Sun, 23 May 2021 23:33:59 +0800</pubDate>
      
      <guid>https://faded828xx.github.io/post/leetcode1707%E4%B8%8E%E6%95%B0%E7%BB%84%E4%B8%AD%E5%85%83%E7%B4%A0%E7%9A%84%E6%9C%80%E5%A4%A7%E5%BC%82%E6%88%96%E5%80%BC/</guid>
      <description>这两个月的刷题还挺不错的，最近好多异或题。 力扣1707
package BitManipulation; import java.util.Arrays; import java.util.Comparator; //leetcode submit region begin(Prohibit modification and deletion) class MaximumXorWithAnElementFromArray1707 { // 先通过忽略不超过mi的方式来降维 具体还是看题解吧 主要是前缀树的思想 public static int[] maximizeXor(int[] nums, int[][] queries) { int len = queries.length; int[] res = new int[len]; Arrays.sort(nums); int[][] queryArr = new int[len][3]; for(int i=0; i&amp;lt;len; i++) { queryArr[i][0] = queries[i][0]; queryArr[i][1] = queries[i][1]; queryArr[i][2] = i; } Arrays.sort(queryArr, Comparator.comparingInt(ints -&amp;gt; ints[1])); int index = 0; Trie trie = new Trie(); for(int[] query : queryArr) { int x = query[0]; int m = query[1]; int id = query[2]; while(index&amp;lt;nums.</description>
    </item>
    
    <item>
      <title>Helloworld汇编</title>
      <link>https://faded828xx.github.io/post/helloworld%E6%B1%87%E7%BC%96/</link>
      <pubDate>Sun, 16 May 2021 22:56:13 +0800</pubDate>
      
      <guid>https://faded828xx.github.io/post/helloworld%E6%B1%87%E7%BC%96/</guid>
      <description>汇编语言是下学期的课，CSAPP之前看了汇编，是x86的CPU，就没在m1上跑，今天试了一下，当然跑出来的肯定是arm汇编。 terminal指令（开发者命令行自带clang编译器）:
faded828x@promote ~ % cd desktop faded828x@promote desktop % vim test.c faded828x@promote desktop % clang test.c -S -o test.s faded828x@promote desktop % vim test.s faded828x@promote desktop % clang test.s -o test.o faded828x@promote desktop % ./test.o Hello World!% faded828x@promote desktop % test.s:
 .p2align 2 _main: ; @main .cfi_startproc ; %bb.0: stp x29, x30, [sp, #-16]! ; 16-byte Folded Spill mov x29, sp .cfi_def_cfa w29, 16 .cfi_offset w30, -8 .cfi_offset w29, -16 adrp x0, l_.</description>
    </item>
    
    <item>
      <title>豆瓣scrapy</title>
      <link>https://faded828xx.github.io/post/%E8%B1%86%E7%93%A3scrapy/</link>
      <pubDate>Thu, 13 May 2021 22:10:36 +0800</pubDate>
      
      <guid>https://faded828xx.github.io/post/%E8%B1%86%E7%93%A3scrapy/</guid>
      <description>用scrapy实现先前的豆瓣爬虫，这里爬了top250，但是结果不是预期的顺序。
import scrapy from scrapy_demo.items import MovieItem class DoubanSpider(scrapy.Spider): name = &#39;douban&#39; allowed_domains = [&#39;douban.com&#39;] start_urls = [ &#39;https://movie.douban.com/top250&#39;, ] def parse(self, response): for i in range(0, 9): url = response.urljoin(&#39;?start=&#39; + str(25 * i)) yield scrapy.Request(url, callback=self.parse_dir_contents) def parse_dir_contents(self, response): # file = &#39;movie.html&#39; # 新建html页面并将爬取到的页面写入其中 # open(file, &#39;w&#39;).write(str(response.body.decode(&#39;utf-8&#39;))) # html = str(response.body.decode(&#39;utf-8&#39;)) # bs = bs4.BeautifulSoup(html, &#39;html.parser&#39;) # for movie in bs.find_all(&#39;div&#39;, class_=&#39;item&#39;): # item = MovieItem() # movie = str(movie) # 每部电影信息 # movielink = re.</description>
    </item>
    
    <item>
      <title>Leetcode1723完成所有工作的最短时间</title>
      <link>https://faded828xx.github.io/post/leetcode1723%E5%AE%8C%E6%88%90%E6%89%80%E6%9C%89%E5%B7%A5%E4%BD%9C%E7%9A%84%E6%9C%80%E7%9F%AD%E6%97%B6%E9%97%B4/</link>
      <pubDate>Sat, 08 May 2021 14:23:16 +0800</pubDate>
      
      <guid>https://faded828xx.github.io/post/leetcode1723%E5%AE%8C%E6%88%90%E6%89%80%E6%9C%89%E5%B7%A5%E4%BD%9C%E7%9A%84%E6%9C%80%E7%9F%AD%E6%97%B6%E9%97%B4/</guid>
      <description>五一去苏州玩了，然后回了趟家。最近在读CSAPP，博客落了一段时间。GoLang啥时候能捡起来啊 手动/facepalm 这里贴一篇力扣的每日一题，是道困难题。
public static int res = Integer.MAX_VALUE; public static int minimumTimeRequired(int[] jobs, int k) { backtrack(jobs, 0, new int[k], 0); return res; } /** * @param jobs 工作量 * @param jobIndex 当前待分配工作索引 * @param jobTime 员工工作分配 * @param curMax 当前分配情况的res值 */ public static void backtrack(int[] jobs, int jobIndex, int[] jobTime, int curMax) { if (jobIndex == jobs.length) { res = Math.min(res, curMax); return; } // 无序分配 因此多个员工分配量都为0时 任选其一即可 boolean flag = true; for (int i = 0; i &amp;lt; jobTime.</description>
    </item>
    
    <item>
      <title>背包问题一</title>
      <link>https://faded828xx.github.io/post/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%E4%B8%80/</link>
      <pubDate>Sun, 25 Apr 2021 16:49:37 +0800</pubDate>
      
      <guid>https://faded828xx.github.io/post/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%E4%B8%80/</guid>
      <description>这几天力扣每日一题尽是动态规划，气死了，这里总结一下刷题中背包问题的基本解法。力扣链接
问题形式多种多样，但本质上就是对给定数组取有序或无序排列，又或者是这个排列的长度或数量，其解决思路主要考虑三个点：
 给定数组元素可取一次还是多次，即0-1背包还是完全背包，体现在遍历target时是倒叙还是正序 排列是有序还是无序，体现在外循环是nums数组（无序）还是target（有序） 具体问题：组合问题，true false（还没做到），最大最小问题  具体题目可以看这几天github上力扣项目的提交，都在DP分类里面。</description>
    </item>
    
    <item>
      <title>字符串模式匹配</title>
      <link>https://faded828xx.github.io/post/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D/</link>
      <pubDate>Tue, 20 Apr 2021 19:14:55 +0800</pubDate>
      
      <guid>https://faded828xx.github.io/post/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D/</guid>
      <description>字符串模式匹配问题再经典不过了，暴力和API调用就不再赘述了。之前学的是RK算法，用的是Hash，还看了Java的indexOf源码，今天正好力扣每日一题又刷到，来学习大名鼎鼎的KMP算法。直接上代码：
// KMP字符串匹配 利用前缀数组 当不匹配时 忽略已匹配字符中的相同前后缀 public int strStr(String haystack, String needle) { int lenS = haystack.length(); int lenN = needle.length(); if(lenN==0) return 0; int[] next = new int[lenN]; // needle的前缀数组 最长公共前后缀 for(int i=1, j=0; i&amp;lt;lenN; i++) { // 更新needle的前缀数组 while(j&amp;gt;0 &amp;amp;&amp;amp; needle.charAt(i)!=needle.charAt(j)) { // 若next[i]与next[j]不相等 则next[i]&amp;lt;=next[i-1] j = next[j-1]; } if(needle.charAt(i)==needle.charAt(j)) // next[i]与next[j]相等 则next[i]=next[i-1]+1 j++; next[i] = j; // i为索引 j为前缀的长度 } for(int i=0, j=0; i&amp;lt;lenS; i++) { // 开始匹配 i为haystack索引 j为needle中已匹配字符数 while(j&amp;gt;0 &amp;amp;&amp;amp; haystack.</description>
    </item>
    
    <item>
      <title>豆瓣小爬虫</title>
      <link>https://faded828xx.github.io/post/%E8%B1%86%E7%93%A3%E5%B0%8F%E7%88%AC%E8%99%AB/</link>
      <pubDate>Sun, 18 Apr 2021 14:29:53 +0800</pubDate>
      
      <guid>https://faded828xx.github.io/post/%E8%B1%86%E7%93%A3%E5%B0%8F%E7%88%AC%E8%99%AB/</guid>
      <description>urllib爬取豆瓣网站
bs4解析html页面，获取有用信息并封装到数组中
sqlite3数据库，将数组存入其中
flask框架作为服务器，路由url地址到指定html页面，并从数据库取出变量动态写入页面
import re import sqlite3 import urllib.request import bs4 from flask import Flask, render_template import ssl ssl._create_default_https_context = ssl.SSLContext app = Flask(__name__) @app.route(&#39;/movie&#39;) def movie(): movies = saveDB() return render_template(&#39;movie.html&#39;, movies=movies) if __name__ == &#39;__main__&#39;: app.run() def getData(): # 返回25部电影数组 html = getHtml(&#39;https://movie.douban.com/top250&#39;) bs = bs4.BeautifulSoup(html, &#39;html.parser&#39;) datalist = [] # 存储25部电影 for item in bs.find_all(&#39;div&#39;, class_=&#39;item&#39;): data = [] item = str(item) # 每部电影信息 movielink = re.</description>
    </item>
    
    <item>
      <title>Hugo建站</title>
      <link>https://faded828xx.github.io/post/hugo%E5%BB%BA%E7%AB%99/</link>
      <pubDate>Fri, 16 Apr 2021 19:26:10 +0800</pubDate>
      
      <guid>https://faded828xx.github.io/post/hugo%E5%BB%BA%E7%AB%99/</guid>
      <description>Hugo是go开发的，用于为Github Pages生成静态网站，在本地编辑markdown文件后push到git仓库，username.github.io便会自动更新博客。Hugo据说相比其他工具比如Hexo等轻量化，且提供了许多主题。
hugo new site hugo_hugo.386_blog cd hugo_hugo.386_blog git clone https://gitlab.com/maxlefou/hugo.386 themes/hugo.386 hugo new post/First.md hugo server -t hugo.386 --buildDrafts hugo --theme=hugo.386 --baseUrl=&amp;quot;https://faded828xx.github.io/&amp;quot; --buildDrafts git init git add . git commit -m &amp;quot;first commit: hugo blog&amp;quot; git remote add origin https://github.com/faded828xx/faded828xx.github.io.git git push -u origin master </description>
    </item>
    
  </channel>
</rss>
