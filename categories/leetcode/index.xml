<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>leetcode on Faded828xx Blog</title>
    <link>https://faded828xx.github.io/categories/leetcode/</link>
    <description>Recent content in leetcode on Faded828xx Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 04 Nov 2021 10:45:17 +0800</lastBuildDate><atom:link href="https://faded828xx.github.io/categories/leetcode/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Leetcode42接雨水</title>
      <link>https://faded828xx.github.io/post/leetcode42%E6%8E%A5%E9%9B%A8%E6%B0%B4/</link>
      <pubDate>Thu, 04 Nov 2021 10:45:17 +0800</pubDate>
      
      <guid>https://faded828xx.github.io/post/leetcode42%E6%8E%A5%E9%9B%A8%E6%B0%B4/</guid>
      <description>黑色十一月的事实，永远不会改变，第十周终究是难熬的。程序周+汇编考试+实习+软考+生日，都挤在这一周了，感觉没有实习的话，可能会好受很多，现在在办公室写下这段，唉😮‍💨，沧桑的人咯。努努力吧，争取都能圆满结束吧！有老唐在，真的无形之中给了我很大的鼓励，嘻嘻。力扣的每日题解最近断了好几次，之前最长的连续172天没了，呜呜。
十一月二十五日补 ，怎想到 这篇博客半个月前写下， 标题为力扣题解， 但是这道题现在还没做， 而且当时写的博客也没提交 hh， 今天补交下。
希望以后能把这题给补了。</description>
    </item>
    
    <item>
      <title>单调栈 Next Greater Number</title>
      <link>https://faded828xx.github.io/post/%E5%8D%95%E8%B0%83%E6%A0%88-next-greater-number/</link>
      <pubDate>Tue, 26 Oct 2021 09:48:09 +0800</pubDate>
      
      <guid>https://faded828xx.github.io/post/%E5%8D%95%E8%B0%83%E6%A0%88-next-greater-number/</guid>
      <description>如题，利用单调栈解决‘下一个更大的数’问题。
[3,7,4,9,5,3,2,1] -&amp;gt; [7,9,9,-1,-1,-1,-1,-1]
用一个栈来维护递增序列，从后往前遍历，对当前数n，pop栈直到栈顶数top&amp;gt;n，此时top即为下一个大于n的数，若栈为空且前一个栈顶数仍小于等于n，则不存在下一个大于n的数。
 对于n和top之间的数，都需要弹栈，因为对n之前还未遍历的数，只关心比自己大的最近的数，而n和top之间的数都比n小，因此比n小就选n，否则从top开始选。 若top是大于n的目标数，top是不需要弹栈的，因此每次取栈顶元素时，不需直接pop。 对于循环数组的相同问题，可以换种角度：将原数组扩展两倍，即做两次同样的运算，同时通过取模来简化代码。  leetcode496
leetcode503 循环数组+单调栈
public int[] nextGreaterElements(int[] nums) { int l = nums.length; int[] res = new int[l]; Deque&amp;lt;Integer&amp;gt; stack = new ArrayDeque&amp;lt;&amp;gt;(); // 循环数组 可以看成将原数组扩展两倍 因此做两遍 for(int i = 2 * l - 1; i &amp;gt;= 0; i--) { int n = nums[i%l]; boolean flag = false; while(!stack.isEmpty()) { int top = stack.peek(); if(top &amp;gt; n) { flag = true; res[i%l] = top; break; } stack.</description>
    </item>
    
    <item>
      <title>Leetcode773 752 BFS模版</title>
      <link>https://faded828xx.github.io/post/leetcode773-752-bfs%E6%A8%A1%E7%89%88/</link>
      <pubDate>Sat, 26 Jun 2021 19:34:48 +0800</pubDate>
      
      <guid>https://faded828xx.github.io/post/leetcode773-752-bfs%E6%A8%A1%E7%89%88/</guid>
      <description>考试周了， 忙着复习， 贴两道算法题水水博客吧， 都是用的BFS模版。
Leetcode752
class OpenTheLock752 { public static int openLock(String[] deadends, String target) { int tar = Integer.parseInt(target); if (tar == 0) return 0; // target为0 无需变化 Set&amp;lt;Integer&amp;gt; dead = new HashSet&amp;lt;&amp;gt;(); Set&amp;lt;Integer&amp;gt; visited = new HashSet&amp;lt;&amp;gt;(); // 记忆化 防止死循环 for (String str : deadends) { // 感觉用整型好处理点 dead.add(Integer.parseInt(str)); } if (dead.contains(0)) // 0直接锁死 return -1; Deque&amp;lt;Integer&amp;gt; queue = new ArrayDeque&amp;lt;&amp;gt;(); // BFS queue.add(0); visited.add(0); int res = 0; while (!</description>
    </item>
    
    <item>
      <title>Leetcode1707与数组中元素的最大异或值</title>
      <link>https://faded828xx.github.io/post/leetcode1707%E4%B8%8E%E6%95%B0%E7%BB%84%E4%B8%AD%E5%85%83%E7%B4%A0%E7%9A%84%E6%9C%80%E5%A4%A7%E5%BC%82%E6%88%96%E5%80%BC/</link>
      <pubDate>Sun, 23 May 2021 23:33:59 +0800</pubDate>
      
      <guid>https://faded828xx.github.io/post/leetcode1707%E4%B8%8E%E6%95%B0%E7%BB%84%E4%B8%AD%E5%85%83%E7%B4%A0%E7%9A%84%E6%9C%80%E5%A4%A7%E5%BC%82%E6%88%96%E5%80%BC/</guid>
      <description>这两个月的刷题还挺不错的，最近好多异或题。 力扣1707
package BitManipulation; import java.util.Arrays; import java.util.Comparator; //leetcode submit region begin(Prohibit modification and deletion) class MaximumXorWithAnElementFromArray1707 { // 先通过忽略不超过mi的方式来降维 具体还是看题解吧 主要是前缀树的思想 public static int[] maximizeXor(int[] nums, int[][] queries) { int len = queries.length; int[] res = new int[len]; Arrays.sort(nums); int[][] queryArr = new int[len][3]; for(int i=0; i&amp;lt;len; i++) { queryArr[i][0] = queries[i][0]; queryArr[i][1] = queries[i][1]; queryArr[i][2] = i; } Arrays.sort(queryArr, Comparator.comparingInt(ints -&amp;gt; ints[1])); int index = 0; Trie trie = new Trie(); for(int[] query : queryArr) { int x = query[0]; int m = query[1]; int id = query[2]; while(index&amp;lt;nums.</description>
    </item>
    
    <item>
      <title>Leetcode1723完成所有工作的最短时间</title>
      <link>https://faded828xx.github.io/post/leetcode1723%E5%AE%8C%E6%88%90%E6%89%80%E6%9C%89%E5%B7%A5%E4%BD%9C%E7%9A%84%E6%9C%80%E7%9F%AD%E6%97%B6%E9%97%B4/</link>
      <pubDate>Sat, 08 May 2021 14:23:16 +0800</pubDate>
      
      <guid>https://faded828xx.github.io/post/leetcode1723%E5%AE%8C%E6%88%90%E6%89%80%E6%9C%89%E5%B7%A5%E4%BD%9C%E7%9A%84%E6%9C%80%E7%9F%AD%E6%97%B6%E9%97%B4/</guid>
      <description>五一去苏州玩了，然后回了趟家。最近在读CSAPP，博客落了一段时间。GoLang啥时候能捡起来啊 手动/facepalm 这里贴一篇力扣的每日一题，是道困难题。
public static int res = Integer.MAX_VALUE; public static int minimumTimeRequired(int[] jobs, int k) { backtrack(jobs, 0, new int[k], 0); return res; } /** * @param jobs 工作量 * @param jobIndex 当前待分配工作索引 * @param jobTime 员工工作分配 * @param curMax 当前分配情况的res值 */ public static void backtrack(int[] jobs, int jobIndex, int[] jobTime, int curMax) { if (jobIndex == jobs.length) { res = Math.min(res, curMax); return; } // 无序分配 因此多个员工分配量都为0时 任选其一即可 boolean flag = true; for (int i = 0; i &amp;lt; jobTime.</description>
    </item>
    
  </channel>
</rss>
